// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TASK1SCHEMA_EXAMPLE_H_
#define FLATBUFFERS_GENERATED_TASK1SCHEMA_EXAMPLE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

namespace Example {

struct Person;
struct PersonBuilder;

struct Group;
struct GroupBuilder;

struct Client;
struct ClientBuilder;

enum ClientData : uint8_t {
  ClientData_NONE = 0,
  ClientData_Person = 1,
  ClientData_Group = 2,
  ClientData_MIN = ClientData_NONE,
  ClientData_MAX = ClientData_Group
};

inline const ClientData (&EnumValuesClientData())[3] {
  static const ClientData values[] = {
    ClientData_NONE,
    ClientData_Person,
    ClientData_Group
  };
  return values;
}

inline const char * const *EnumNamesClientData() {
  static const char * const names[4] = {
    "NONE",
    "Person",
    "Group",
    nullptr
  };
  return names;
}

inline const char *EnumNameClientData(ClientData e) {
  if (::flatbuffers::IsOutRange(e, ClientData_NONE, ClientData_Group)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesClientData()[index];
}

template<typename T> struct ClientDataTraits {
  static const ClientData enum_value = ClientData_NONE;
};

template<> struct ClientDataTraits<Example::Person> {
  static const ClientData enum_value = ClientData_Person;
};

template<> struct ClientDataTraits<Example::Group> {
  static const ClientData enum_value = ClientData_Group;
};

bool VerifyClientData(::flatbuffers::Verifier &verifier, const void *obj, ClientData type);
bool VerifyClientDataVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct Person FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PersonBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_AGE = 6,
    VT_WEIGHT = 8,
    VT_GENDER = 10
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  uint8_t age() const {
    return GetField<uint8_t>(VT_AGE, 0);
  }
  float weight() const {
    return GetField<float>(VT_WEIGHT, 0.0f);
  }
  const ::flatbuffers::String *gender() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GENDER);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint8_t>(verifier, VT_AGE, 1) &&
           VerifyField<float>(verifier, VT_WEIGHT, 4) &&
           VerifyOffset(verifier, VT_GENDER) &&
           verifier.VerifyString(gender()) &&
           verifier.EndTable();
  }
};

struct PersonBuilder {
  typedef Person Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Person::VT_NAME, name);
  }
  void add_age(uint8_t age) {
    fbb_.AddElement<uint8_t>(Person::VT_AGE, age, 0);
  }
  void add_weight(float weight) {
    fbb_.AddElement<float>(Person::VT_WEIGHT, weight, 0.0f);
  }
  void add_gender(::flatbuffers::Offset<::flatbuffers::String> gender) {
    fbb_.AddOffset(Person::VT_GENDER, gender);
  }
  explicit PersonBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Person> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Person>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Person> CreatePerson(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    uint8_t age = 0,
    float weight = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::String> gender = 0) {
  PersonBuilder builder_(_fbb);
  builder_.add_gender(gender);
  builder_.add_weight(weight);
  builder_.add_name(name);
  builder_.add_age(age);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Person> CreatePersonDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    uint8_t age = 0,
    float weight = 0.0f,
    const char *gender = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto gender__ = gender ? _fbb.CreateString(gender) : 0;
  return Example::CreatePerson(
      _fbb,
      name__,
      age,
      weight,
      gender__);
}

struct Group FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GroupBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_AVERAGE_AGE = 6,
    VT_AVERAGE_WEIGHT = 8,
    VT_MEMBERS = 10
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  float average_age() const {
    return GetField<float>(VT_AVERAGE_AGE, 0.0f);
  }
  float average_weight() const {
    return GetField<float>(VT_AVERAGE_WEIGHT, 0.0f);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *members() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_MEMBERS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<float>(verifier, VT_AVERAGE_AGE, 4) &&
           VerifyField<float>(verifier, VT_AVERAGE_WEIGHT, 4) &&
           VerifyOffset(verifier, VT_MEMBERS) &&
           verifier.VerifyVector(members()) &&
           verifier.VerifyVectorOfStrings(members()) &&
           verifier.EndTable();
  }
};

struct GroupBuilder {
  typedef Group Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Group::VT_NAME, name);
  }
  void add_average_age(float average_age) {
    fbb_.AddElement<float>(Group::VT_AVERAGE_AGE, average_age, 0.0f);
  }
  void add_average_weight(float average_weight) {
    fbb_.AddElement<float>(Group::VT_AVERAGE_WEIGHT, average_weight, 0.0f);
  }
  void add_members(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> members) {
    fbb_.AddOffset(Group::VT_MEMBERS, members);
  }
  explicit GroupBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Group> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Group>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Group> CreateGroup(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    float average_age = 0.0f,
    float average_weight = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> members = 0) {
  GroupBuilder builder_(_fbb);
  builder_.add_members(members);
  builder_.add_average_weight(average_weight);
  builder_.add_average_age(average_age);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Group> CreateGroupDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    float average_age = 0.0f,
    float average_weight = 0.0f,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *members = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto members__ = members ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*members) : 0;
  return Example::CreateGroup(
      _fbb,
      name__,
      average_age,
      average_weight,
      members__);
}

struct Client FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ClientBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLIENT_DATA_TYPE = 4,
    VT_CLIENT_DATA = 6
  };
  Example::ClientData client_data_type() const {
    return static_cast<Example::ClientData>(GetField<uint8_t>(VT_CLIENT_DATA_TYPE, 0));
  }
  const void *client_data() const {
    return GetPointer<const void *>(VT_CLIENT_DATA);
  }
  template<typename T> const T *client_data_as() const;
  const Example::Person *client_data_as_Person() const {
    return client_data_type() == Example::ClientData_Person ? static_cast<const Example::Person *>(client_data()) : nullptr;
  }
  const Example::Group *client_data_as_Group() const {
    return client_data_type() == Example::ClientData_Group ? static_cast<const Example::Group *>(client_data()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_CLIENT_DATA_TYPE, 1) &&
           VerifyOffset(verifier, VT_CLIENT_DATA) &&
           VerifyClientData(verifier, client_data(), client_data_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Example::Person *Client::client_data_as<Example::Person>() const {
  return client_data_as_Person();
}

template<> inline const Example::Group *Client::client_data_as<Example::Group>() const {
  return client_data_as_Group();
}

struct ClientBuilder {
  typedef Client Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_client_data_type(Example::ClientData client_data_type) {
    fbb_.AddElement<uint8_t>(Client::VT_CLIENT_DATA_TYPE, static_cast<uint8_t>(client_data_type), 0);
  }
  void add_client_data(::flatbuffers::Offset<void> client_data) {
    fbb_.AddOffset(Client::VT_CLIENT_DATA, client_data);
  }
  explicit ClientBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Client> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Client>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Client> CreateClient(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Example::ClientData client_data_type = Example::ClientData_NONE,
    ::flatbuffers::Offset<void> client_data = 0) {
  ClientBuilder builder_(_fbb);
  builder_.add_client_data(client_data);
  builder_.add_client_data_type(client_data_type);
  return builder_.Finish();
}

inline bool VerifyClientData(::flatbuffers::Verifier &verifier, const void *obj, ClientData type) {
  switch (type) {
    case ClientData_NONE: {
      return true;
    }
    case ClientData_Person: {
      auto ptr = reinterpret_cast<const Example::Person *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ClientData_Group: {
      auto ptr = reinterpret_cast<const Example::Group *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyClientDataVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyClientData(
        verifier,  values->Get(i), types->GetEnum<ClientData>(i))) {
      return false;
    }
  }
  return true;
}

inline const Example::Client *GetClient(const void *buf) {
  return ::flatbuffers::GetRoot<Example::Client>(buf);
}

inline const Example::Client *GetSizePrefixedClient(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Example::Client>(buf);
}

inline bool VerifyClientBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Example::Client>(nullptr);
}

inline bool VerifySizePrefixedClientBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Example::Client>(nullptr);
}

inline void FinishClientBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Example::Client> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedClientBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Example::Client> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Example

#endif  // FLATBUFFERS_GENERATED_TASK1SCHEMA_EXAMPLE_H_
